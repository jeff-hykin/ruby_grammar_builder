# frozen_string_literal: true

require_relative "./base_pattern.rb"

#
# LegacyPattern allows for a hash to be treated as a Pattern
# It implements the minimum required to be sucessfully generated by the grammar
#
class LegacyPattern < PatternBase
    def initialize(hash)
        super("placeholder")
        @hash = hash.transform_keys(&:to_sym)
    end

    # LegacyPattern cannot be evaluated
    def evaluate(*_ignored)
        raise "LegacyPattern cannot be used as a part of a Pattern"
    end

    # LegacyPattern cannot be chained
    def insert!(_pattern)
        raise "LegacyPattern cannot be used as a part of a Pattern"
    end

    #
    # (see PatternBase#to_tag)
    #
    # @return [Hash] The hash it was constructed with
    #
    def to_tag
        @hash
    end

    #
    # (see PatternBase#run_tests)
    #
    def run_tests
        true
    end

    #
    # (see PatternBase#map!)
    #
    def map!(*)
        self
    end

    #
    # (see PatternBase#start_pattern)
    #
    def start_pattern
        ""
    end

    #
    # (see PatternBase#__deep_clone__)
    #
    def __deep_clone__
        self.class.new(@hash)
    end
end